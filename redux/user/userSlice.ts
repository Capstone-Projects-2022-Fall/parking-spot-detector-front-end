import { RootState, store } from "../store";
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import axios from "axios";
import { LoginStatus, UserState } from "./index";

const initialState: UserState = {
  id: 0,
  name: "",
  username: "",
  email: "",
  status: LoginStatus.IDLE,
  isLoggedIn: LoginStatus.FAILED,
  address: {
    street: "",
    suite: "",
    city: "",
    zipcode: "",
    geo: {
      lat: 0,
      lng: 0,
    },
  },
};

export const fetchUserAsync = createAsyncThunk(
  "user/fetchUser",
  async (email: string) => {
    try {
      const response = await axios.get<UserState[]>(
        "https://jsonplaceholder.typicode.com/users/?email=" + email
      );
      let data = response.data[0];
      console.log(response.data);
      data.isLoggedIn = LoginStatus.SUCCEEDED;
      return data;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        console.log("error message: ", error.message);
        initialState.status = LoginStatus.FAILED;
        return initialState;
      }
      throw error;
    }
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    currentUser: (state, action: PayloadAction<UserState>) => {
      state = action.payload;
    },
    logoutUser: (state) => {
      state = initialState;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUserAsync.pending, (state) => {
        state.status = LoginStatus.LOADING;
      })
      .addCase(fetchUserAsync.fulfilled, (state, action) => {
        state.id = action.payload!.id;
        state.status = LoginStatus.SUCCEEDED;
        state.isLoggedIn = action.payload!.isLoggedIn;
        state.name = action.payload!.name;
        state.username = action.payload!.username;
        state.email = action.payload!.email;
        state.address = action.payload?.address;
      })
      .addCase(fetchUserAsync.rejected, (state) => {
        state.status = LoginStatus.FAILED;
      });
  },
});

export const { currentUser, logoutUser } = userSlice.actions;

// User ID global
export const selectUserId = (state: RootState) => state.user.id;

export default userSlice.reducer;
